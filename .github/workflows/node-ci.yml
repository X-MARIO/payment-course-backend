# .github/workflows/node-ci.yml

# Название рабочего процесса, которое будет отображаться в GitHub Actions
name: Node.js CI & Security Scan

# Триггеры для запуска: push в main и pull request на main
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  # ЗАДАЧА 1: Сборка и все виды тестов
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    # Подключаем сервис PostgreSQL, который будет доступен для e2e-тестов
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        # Опция для проверки готовности сервиса перед запуском шагов
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Настройка Node.js с использованием версии из матрицы
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Шаг 3: Включение Corepack для использования правильной версии Yarn
      - name: Enable Corepack
        run: corepack enable

      # Шаг 4: Настройка кэша для Yarn для ускорения последующих сборок
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Шаг 5: Установка зависимостей
      - name: Install dependencies
        run: yarn install --immutable

      # Шаг 6: Проверка на устаревшие пакеты (информационный шаг)
      - name: Check for outdated packages (Informational)
        run: yarn outdated
        # Этот шаг не уронит сборку, а просто выведет информацию в лог
        continue-on-error: true

      # Шаг 7: Создание .env файла для CI/CD
      - name: Create .env file for tests
        run: |
          echo "HTTP_PORT=3000" >> .env
          echo "HTTP_HOST=http://localhost:3000" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_USER=testuser" >> .env
          echo "POSTGRES_PASSWORD=testpassword" >> .env
          echo "POSTGRES_DATABASE=testdb" >> .env
          echo "NODE_ENV=test" >> .env

      # Шаг 8: Запуск линтера для проверки стиля кода
      - name: Run linter
        run: yarn lint

      # Шаг 9: Запуск юнит-тестов
      - name: Run unit tests
        run: yarn test

      # Шаг 10: Запуск e2e-тестов с использованием сервиса PostgreSQL
      - name: Run e2e tests
        run: yarn test:e2e

  # ЗАДАЧА 2: Проверка Production сборки
  check-production-build:
    name: Check Production Build
    runs-on: ubuntu-latest
    # Эта задача начнется только после успешного завершения 'build-and-test'
    needs: build-and-test
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable Corepack
        run: corepack enable

      # Устанавливаем только production-зависимости, чтобы убедиться,
      # что в билд не попали dev-зависимости.
      - name: Install production dependencies
        run: yarn install --production --immutable

      # Собираем проект для проверки, что все компилируется без ошибок.
      - name: Build project
        run: yarn build

  # ЗАДАЧА 3: Сканирование уязвимостей
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Статический анализ кода на уязвимости с помощью CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Шаг 3: Проверка зависимостей, добавляемых в Pull Request
      - name: Dependency Review (for Pull Requests)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: critical

      # --- Шаги, которые выполняются только при push в main ---

      # Шаг 4.1: Настройка Node.js и зависимостей для сканирования
      - name: Set up Node.js for Scan (for push to main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies for Scan (for push to main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          corepack enable
          yarn install --immutable

      # Шаг 4.2: Аудит на КРИТИЧЕСКИЕ уязвимости (роняет сборку)
      - name: Audit for CRITICAL vulnerabilities
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: yarn npm audit --severity critical

      # Шаг 4.3: Информационный аудит всех уязвимостей (не роняет сборку)
      - name: Audit for NON-CRITICAL vulnerabilities (Informational)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: yarn npm audit
        continue-on-error: true

      # Шаг 4.4: Сканирование Trivy на CRITICAL/HIGH уязвимости (роняет сборку)
      - name: Scan for CRITICAL/HIGH vulns with Trivy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1' # Завершить с ошибкой, если что-то найдено
          ignore-unfixed: true
          vuln-type: 'library'
          severity: 'CRITICAL,HIGH'

      # Шаг 4.5: Информационное сканирование Trivy на LOW/MEDIUM (не роняет сборку)
      - name: Scan for LOW/MEDIUM vulns with Trivy (Informational)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0' # НЕ завершать с ошибкой, просто вывести отчет
          ignore-unfixed: true
          vuln-type: 'library'
          severity: 'LOW,MEDIUM,UNKNOWN'