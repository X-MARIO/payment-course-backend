import { Logger, ValidationPipe } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { NestFactory } from '@nestjs/core';
import * as process from 'node:process';

import { AppModule } from './app.module';
import { getCorsConfig, getLoggerConfig } from './config';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    logger: getLoggerConfig(),
  });

  const config = app.get(ConfigService);
  const logger = new Logger('Bootstrap'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  app.enableCors(getCorsConfig(config));

  // –í–∫–ª—é—á–∞–µ–º graceful shutdown
  app.enableShutdownHooks();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤
  app.setGlobalPrefix('api/v1');

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ValidationPipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ DTO
      transform: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç payload –∫ —Ç–∏–ø–∞–º DTO
      forbidNonWhitelisted: true, // –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –ª–∏—à–Ω–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
      transformOptions: {
        enableImplicitConversion: true, // –í–∫–ª—é—á–∞–µ—Ç –Ω–µ—è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
      },
    }),
  );

  const port = config.getOrThrow<number>('HTTP_PORT');
  const host = config.getOrThrow<string>('HTTP_HOST');

  try {
    await app.listen(port, '0.0.0.0'); // –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö

    logger.log(`üöÄ Server is running on: ${host}:${port}`);
    logger.log(
      `‚úÖ Application successfully started in ${process.env.NODE_ENV} mode`,
    );
  } catch (error) {
    logger.error('‚ùå Failed to start server', error.stack);
    process.exit(1);
  }
}

bootstrap();
