import { Logger, ValidationPipe } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { NestFactory } from '@nestjs/core';
import * as compression from 'compression';
import * as cookieParser from 'cookie-parser';
import helmet from 'helmet';
import * as hpp from 'hpp';
import * as process from 'node:process';

import { AppModule } from './app.module';
import { getCorsConfig, getLoggerConfig, setupSwagger } from './config';

// import { PrismaService } from './prisma/prisma.service'; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç PrismaService

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    logger: getLoggerConfig(),
  });

  const config = app.get(ConfigService);
  const logger = new Logger('Bootstrap'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
  app.use(helmet());
  // –°–∂–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  app.use(compression());
  // –ü–∞—Ä—Å–∏—Ç Cookie –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –≤ req.cookies
  app.use(cookieParser());

  // –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç HTTP Parameter Pollution
  app.use(hpp());

  // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Graceful Shutdown
  app.enableShutdownHooks();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  app.enableCors(getCorsConfig(config));

  // –í–∫–ª—é—á–∞–µ–º graceful shutdown
  app.enableShutdownHooks();
  // const prismaService = app.get(PrismaService); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è Prisma
  // await prismaService.enableShutdownHooks(app); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è Prisma

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤
  app.setGlobalPrefix('api/v1');

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ValidationPipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ DTO
      transform: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç payload –∫ —Ç–∏–ø–∞–º DTO
      forbidNonWhitelisted: true, // –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –ª–∏—à–Ω–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
      transformOptions: {
        enableImplicitConversion: true, // –í–∫–ª—é—á–∞–µ—Ç –Ω–µ—è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
      },
    }),
  );

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Swagger –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ –≤ production
  if (process.env.NODE_ENV !== 'production') {
    setupSwagger(app);
  }

  const port = config.getOrThrow<number>('HTTP_PORT');
  const host = config.getOrThrow<string>('HTTP_HOST');

  try {
    await app.listen(port, '0.0.0.0'); // –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker

    logger.log(`üöÄ Server is running on: ${host}`); // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ host, port –Ω–µ –≤—ã–≤–æ–¥–∏–º
    if (process.env.NODE_ENV !== 'production') {
      logger.log(`üìö Swagger docs available at: ${host}/api/docs`);
    }
    logger.log(
      `‚úÖ Application successfully started in ${
        process.env.NODE_ENV || 'development'
      } mode`,
    );
  } catch (error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Error –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º
    if (error instanceof Error) {
      logger.error(`üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–π—Å—Ç–≤—É stack
      logger.error(`üìÑ –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: ${error.stack}`);
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Error
      logger.error(`üìÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${JSON.stringify(error)}`);
    }
    process.exit(1);
  }
}

void bootstrap();
